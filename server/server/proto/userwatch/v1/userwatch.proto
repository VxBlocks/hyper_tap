// Copyright 2020-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package userwatch.v1;

import "google/protobuf/timestamp.proto";
import "options/gorm.proto";
import "google/protobuf/field_mask.proto";

option go_package = "hyperliquid-server/gen/userwatch/v1;userwatchv1";

message UserWatch {
  option (gorm.opts).ormable = true;
  int64 id = 1 [(gorm.field).tag = { primary_key: true}];
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  string user_id = 4 [(gorm.field).tag = { index: "user_id_idx"}];
  string watch_user_id = 5;
  float lower_price = 6;
  repeated string events = 7;
}

message CreateUserWatchRequest {
  UserWatch payload = 1;
}

message CreateUserWatchResponse {
  UserWatch result = 1;
}

message UpdateUserWatchRequest {
  UserWatch user_watch = 1;
  google.protobuf.FieldMask masks = 2;
}

message UpdateUserWatchResponse {
  UserWatch user_watch = 1;
}

message DeleteUserWatchRequest {
  int64 id = 1;
}

message DeleteUserWatchResponse {}

message ListUserWatchRequest {
}

message ListUserWatchResponse {
  repeated UserWatch results = 1;
}

message UserWatchMsg {
  option (gorm.opts).ormable = true;
  int64 id = 1 [(gorm.field).tag = { primary_key: true}];
  google.protobuf.Timestamp created_at = 2;
  string user_id = 3 [(gorm.field).tag = { index: "user_id_idx"}];
  string watch_user_id = 4;
  string event = 5;
  string msg = 6;
  string token = 7;
  string size = 8;
  int64 time = 9;
}

message GetUserWatchMsgRequest {
  int64 id = 1;
}

message GetUserWatchMsgResponse {
  UserWatchMsg results = 1;
}

message ListUserWatchMsgRequest {
  string user_id = 1;
}

message ListUserWatchMsgResponse {
  repeated UserWatchMsg results = 1;
}

service UserWatchService {
  rpc CreateUserWatch(CreateUserWatchRequest) returns (CreateUserWatchResponse) {}
  rpc UpUserWatch(UpdateUserWatchRequest) returns (UpdateUserWatchResponse) {}
  rpc DeleteUserWatch(DeleteUserWatchRequest) returns (DeleteUserWatchResponse) {
      // This option is required because the type/table can't be inferred
      // by the return type
      option (gorm.method).object_type = "UserWatch";
  }
  rpc ListUserWatch(ListUserWatchRequest) returns (ListUserWatchResponse) {}

  rpc GetUserWatchMsg(GetUserWatchMsgRequest) returns (GetUserWatchMsgResponse) {}
  rpc ListUserWatchMsg(ListUserWatchMsgRequest) returns (ListUserWatchMsgResponse) {}
}
