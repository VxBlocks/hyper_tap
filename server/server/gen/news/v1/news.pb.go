// Copyright 2020-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: news/v1/news.proto

package newsv1

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type News struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Preview       string                 `protobuf:"bytes,4,opt,name=preview,proto3" json:"preview,omitempty"`
	Category      string                 `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	Read          bool                   `protobuf:"varint,6,opt,name=read,proto3" json:"read,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *News) Reset() {
	*x = News{}
	mi := &file_news_v1_news_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *News) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*News) ProtoMessage() {}

func (x *News) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use News.ProtoReflect.Descriptor instead.
func (*News) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{0}
}

func (x *News) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *News) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *News) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *News) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

func (x *News) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *News) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

type ListUserNewsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserNewsRequest) Reset() {
	*x = ListUserNewsRequest{}
	mi := &file_news_v1_news_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserNewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserNewsRequest) ProtoMessage() {}

func (x *ListUserNewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserNewsRequest.ProtoReflect.Descriptor instead.
func (*ListUserNewsRequest) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{1}
}

type ListUserNewsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*News                `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserNewsResponse) Reset() {
	*x = ListUserNewsResponse{}
	mi := &file_news_v1_news_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserNewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserNewsResponse) ProtoMessage() {}

func (x *ListUserNewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserNewsResponse.ProtoReflect.Descriptor instead.
func (*ListUserNewsResponse) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{2}
}

func (x *ListUserNewsResponse) GetResults() []*News {
	if x != nil {
		return x.Results
	}
	return nil
}

type MarkNewsReadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkNewsReadRequest) Reset() {
	*x = MarkNewsReadRequest{}
	mi := &file_news_v1_news_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkNewsReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkNewsReadRequest) ProtoMessage() {}

func (x *MarkNewsReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkNewsReadRequest.ProtoReflect.Descriptor instead.
func (*MarkNewsReadRequest) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{3}
}

func (x *MarkNewsReadRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type MarkNewsReadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkNewsReadResponse) Reset() {
	*x = MarkNewsReadResponse{}
	mi := &file_news_v1_news_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkNewsReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkNewsReadResponse) ProtoMessage() {}

func (x *MarkNewsReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkNewsReadResponse.ProtoReflect.Descriptor instead.
func (*MarkNewsReadResponse) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{4}
}

var File_news_v1_news_proto protoreflect.FileDescriptor

const file_news_v1_news_proto_rawDesc = "" +
	"\n" +
	"\x12news/v1/news.proto\x12\anews.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x12options/gorm.proto\x1a google/protobuf/field_mask.proto\"\x99\x01\n" +
	"\x04News\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1d\n" +
	"\n" +
	"created_at\x18\x03 \x01(\tR\tcreatedAt\x12\x18\n" +
	"\apreview\x18\x04 \x01(\tR\apreview\x12\x1a\n" +
	"\bcategory\x18\x05 \x01(\tR\bcategory\x12\x12\n" +
	"\x04read\x18\x06 \x01(\bR\x04read\"\x15\n" +
	"\x13ListUserNewsRequest\"?\n" +
	"\x14ListUserNewsResponse\x12'\n" +
	"\aresults\x18\x01 \x03(\v2\r.news.v1.NewsR\aresults\")\n" +
	"\x13MarkNewsReadRequest\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\"\x16\n" +
	"\x14MarkNewsReadResponse2\xa7\x01\n" +
	"\vNewsService\x12I\n" +
	"\bListNews\x12\x1c.news.v1.ListUserNewsRequest\x1a\x1d.news.v1.ListUserNewsResponse\"\x00\x12M\n" +
	"\fMarkNewsRead\x12\x1c.news.v1.MarkNewsReadRequest\x1a\x1d.news.v1.MarkNewsReadResponse\"\x00B|\n" +
	"\vcom.news.v1B\tNewsProtoP\x01Z%hyperliquid-server/gen/news/v1;newsv1\xa2\x02\x03NXX\xaa\x02\aNews.V1\xca\x02\aNews\\V1\xe2\x02\x13News\\V1\\GPBMetadata\xea\x02\bNews::V1b\x06proto3"

var (
	file_news_v1_news_proto_rawDescOnce sync.Once
	file_news_v1_news_proto_rawDescData []byte
)

func file_news_v1_news_proto_rawDescGZIP() []byte {
	file_news_v1_news_proto_rawDescOnce.Do(func() {
		file_news_v1_news_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_news_v1_news_proto_rawDesc), len(file_news_v1_news_proto_rawDesc)))
	})
	return file_news_v1_news_proto_rawDescData
}

var file_news_v1_news_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_news_v1_news_proto_goTypes = []any{
	(*News)(nil),                 // 0: news.v1.News
	(*ListUserNewsRequest)(nil),  // 1: news.v1.ListUserNewsRequest
	(*ListUserNewsResponse)(nil), // 2: news.v1.ListUserNewsResponse
	(*MarkNewsReadRequest)(nil),  // 3: news.v1.MarkNewsReadRequest
	(*MarkNewsReadResponse)(nil), // 4: news.v1.MarkNewsReadResponse
}
var file_news_v1_news_proto_depIdxs = []int32{
	0, // 0: news.v1.ListUserNewsResponse.results:type_name -> news.v1.News
	1, // 1: news.v1.NewsService.ListNews:input_type -> news.v1.ListUserNewsRequest
	3, // 2: news.v1.NewsService.MarkNewsRead:input_type -> news.v1.MarkNewsReadRequest
	2, // 3: news.v1.NewsService.ListNews:output_type -> news.v1.ListUserNewsResponse
	4, // 4: news.v1.NewsService.MarkNewsRead:output_type -> news.v1.MarkNewsReadResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_news_v1_news_proto_init() }
func file_news_v1_news_proto_init() {
	if File_news_v1_news_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_news_v1_news_proto_rawDesc), len(file_news_v1_news_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_news_v1_news_proto_goTypes,
		DependencyIndexes: file_news_v1_news_proto_depIdxs,
		MessageInfos:      file_news_v1_news_proto_msgTypes,
	}.Build()
	File_news_v1_news_proto = out.File
	file_news_v1_news_proto_goTypes = nil
	file_news_v1_news_proto_depIdxs = nil
}
