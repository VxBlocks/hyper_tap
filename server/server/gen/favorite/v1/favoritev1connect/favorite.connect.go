// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: favorite/v1/favorite.proto

package favoritev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "hyperliquid-server/gen/favorite/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FavoriteServiceName is the fully-qualified name of the FavoriteService service.
	FavoriteServiceName = "login.v1.FavoriteService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FavoriteServiceCreateFavoriteProcedure is the fully-qualified name of the FavoriteService's
	// CreateFavorite RPC.
	FavoriteServiceCreateFavoriteProcedure = "/login.v1.FavoriteService/CreateFavorite"
	// FavoriteServiceListFavoriteProcedure is the fully-qualified name of the FavoriteService's
	// ListFavorite RPC.
	FavoriteServiceListFavoriteProcedure = "/login.v1.FavoriteService/ListFavorite"
	// FavoriteServiceDeleteFavoriteProcedure is the fully-qualified name of the FavoriteService's
	// DeleteFavorite RPC.
	FavoriteServiceDeleteFavoriteProcedure = "/login.v1.FavoriteService/DeleteFavorite"
)

// FavoriteServiceClient is a client for the login.v1.FavoriteService service.
type FavoriteServiceClient interface {
	CreateFavorite(context.Context, *connect.Request[v1.CreateFavoriteRequest]) (*connect.Response[v1.CreateFavoriteResponse], error)
	ListFavorite(context.Context, *connect.Request[v1.ListFavoriteRequest]) (*connect.Response[v1.ListFavoriteResponse], error)
	DeleteFavorite(context.Context, *connect.Request[v1.DeleteFavoriteRequest]) (*connect.Response[v1.DeleteFavoriteResponse], error)
}

// NewFavoriteServiceClient constructs a client for the login.v1.FavoriteService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFavoriteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FavoriteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	favoriteServiceMethods := v1.File_favorite_v1_favorite_proto.Services().ByName("FavoriteService").Methods()
	return &favoriteServiceClient{
		createFavorite: connect.NewClient[v1.CreateFavoriteRequest, v1.CreateFavoriteResponse](
			httpClient,
			baseURL+FavoriteServiceCreateFavoriteProcedure,
			connect.WithSchema(favoriteServiceMethods.ByName("CreateFavorite")),
			connect.WithClientOptions(opts...),
		),
		listFavorite: connect.NewClient[v1.ListFavoriteRequest, v1.ListFavoriteResponse](
			httpClient,
			baseURL+FavoriteServiceListFavoriteProcedure,
			connect.WithSchema(favoriteServiceMethods.ByName("ListFavorite")),
			connect.WithClientOptions(opts...),
		),
		deleteFavorite: connect.NewClient[v1.DeleteFavoriteRequest, v1.DeleteFavoriteResponse](
			httpClient,
			baseURL+FavoriteServiceDeleteFavoriteProcedure,
			connect.WithSchema(favoriteServiceMethods.ByName("DeleteFavorite")),
			connect.WithClientOptions(opts...),
		),
	}
}

// favoriteServiceClient implements FavoriteServiceClient.
type favoriteServiceClient struct {
	createFavorite *connect.Client[v1.CreateFavoriteRequest, v1.CreateFavoriteResponse]
	listFavorite   *connect.Client[v1.ListFavoriteRequest, v1.ListFavoriteResponse]
	deleteFavorite *connect.Client[v1.DeleteFavoriteRequest, v1.DeleteFavoriteResponse]
}

// CreateFavorite calls login.v1.FavoriteService.CreateFavorite.
func (c *favoriteServiceClient) CreateFavorite(ctx context.Context, req *connect.Request[v1.CreateFavoriteRequest]) (*connect.Response[v1.CreateFavoriteResponse], error) {
	return c.createFavorite.CallUnary(ctx, req)
}

// ListFavorite calls login.v1.FavoriteService.ListFavorite.
func (c *favoriteServiceClient) ListFavorite(ctx context.Context, req *connect.Request[v1.ListFavoriteRequest]) (*connect.Response[v1.ListFavoriteResponse], error) {
	return c.listFavorite.CallUnary(ctx, req)
}

// DeleteFavorite calls login.v1.FavoriteService.DeleteFavorite.
func (c *favoriteServiceClient) DeleteFavorite(ctx context.Context, req *connect.Request[v1.DeleteFavoriteRequest]) (*connect.Response[v1.DeleteFavoriteResponse], error) {
	return c.deleteFavorite.CallUnary(ctx, req)
}

// FavoriteServiceHandler is an implementation of the login.v1.FavoriteService service.
type FavoriteServiceHandler interface {
	CreateFavorite(context.Context, *connect.Request[v1.CreateFavoriteRequest]) (*connect.Response[v1.CreateFavoriteResponse], error)
	ListFavorite(context.Context, *connect.Request[v1.ListFavoriteRequest]) (*connect.Response[v1.ListFavoriteResponse], error)
	DeleteFavorite(context.Context, *connect.Request[v1.DeleteFavoriteRequest]) (*connect.Response[v1.DeleteFavoriteResponse], error)
}

// NewFavoriteServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFavoriteServiceHandler(svc FavoriteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	favoriteServiceMethods := v1.File_favorite_v1_favorite_proto.Services().ByName("FavoriteService").Methods()
	favoriteServiceCreateFavoriteHandler := connect.NewUnaryHandler(
		FavoriteServiceCreateFavoriteProcedure,
		svc.CreateFavorite,
		connect.WithSchema(favoriteServiceMethods.ByName("CreateFavorite")),
		connect.WithHandlerOptions(opts...),
	)
	favoriteServiceListFavoriteHandler := connect.NewUnaryHandler(
		FavoriteServiceListFavoriteProcedure,
		svc.ListFavorite,
		connect.WithSchema(favoriteServiceMethods.ByName("ListFavorite")),
		connect.WithHandlerOptions(opts...),
	)
	favoriteServiceDeleteFavoriteHandler := connect.NewUnaryHandler(
		FavoriteServiceDeleteFavoriteProcedure,
		svc.DeleteFavorite,
		connect.WithSchema(favoriteServiceMethods.ByName("DeleteFavorite")),
		connect.WithHandlerOptions(opts...),
	)
	return "/login.v1.FavoriteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FavoriteServiceCreateFavoriteProcedure:
			favoriteServiceCreateFavoriteHandler.ServeHTTP(w, r)
		case FavoriteServiceListFavoriteProcedure:
			favoriteServiceListFavoriteHandler.ServeHTTP(w, r)
		case FavoriteServiceDeleteFavoriteProcedure:
			favoriteServiceDeleteFavoriteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFavoriteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFavoriteServiceHandler struct{}

func (UnimplementedFavoriteServiceHandler) CreateFavorite(context.Context, *connect.Request[v1.CreateFavoriteRequest]) (*connect.Response[v1.CreateFavoriteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("login.v1.FavoriteService.CreateFavorite is not implemented"))
}

func (UnimplementedFavoriteServiceHandler) ListFavorite(context.Context, *connect.Request[v1.ListFavoriteRequest]) (*connect.Response[v1.ListFavoriteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("login.v1.FavoriteService.ListFavorite is not implemented"))
}

func (UnimplementedFavoriteServiceHandler) DeleteFavorite(context.Context, *connect.Request[v1.DeleteFavoriteRequest]) (*connect.Response[v1.DeleteFavoriteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("login.v1.FavoriteService.DeleteFavorite is not implemented"))
}
