// Copyright 2020-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: price_alert/v1/price_alert.proto

package pricealertv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "hyperliquid-server/gen/price_alert/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PriceAlertServiceName is the fully-qualified name of the PriceAlertService service.
	PriceAlertServiceName = "news.v1.PriceAlertService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PriceAlertServiceListPriceAlertsProcedure is the fully-qualified name of the PriceAlertService's
	// ListPriceAlerts RPC.
	PriceAlertServiceListPriceAlertsProcedure = "/news.v1.PriceAlertService/ListPriceAlerts"
	// PriceAlertServiceMarkPriceAlertsReadProcedure is the fully-qualified name of the
	// PriceAlertService's MarkPriceAlertsRead RPC.
	PriceAlertServiceMarkPriceAlertsReadProcedure = "/news.v1.PriceAlertService/MarkPriceAlertsRead"
)

// PriceAlertServiceClient is a client for the news.v1.PriceAlertService service.
type PriceAlertServiceClient interface {
	ListPriceAlerts(context.Context, *connect.Request[v1.ListPriceAlertRequest]) (*connect.Response[v1.ListPriceAlertResponse], error)
	MarkPriceAlertsRead(context.Context, *connect.Request[v1.MarkPriceAlertReadRequest]) (*connect.Response[v1.MarkPriceAlertReadResponse], error)
}

// NewPriceAlertServiceClient constructs a client for the news.v1.PriceAlertService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPriceAlertServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PriceAlertServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	priceAlertServiceMethods := v1.File_price_alert_v1_price_alert_proto.Services().ByName("PriceAlertService").Methods()
	return &priceAlertServiceClient{
		listPriceAlerts: connect.NewClient[v1.ListPriceAlertRequest, v1.ListPriceAlertResponse](
			httpClient,
			baseURL+PriceAlertServiceListPriceAlertsProcedure,
			connect.WithSchema(priceAlertServiceMethods.ByName("ListPriceAlerts")),
			connect.WithClientOptions(opts...),
		),
		markPriceAlertsRead: connect.NewClient[v1.MarkPriceAlertReadRequest, v1.MarkPriceAlertReadResponse](
			httpClient,
			baseURL+PriceAlertServiceMarkPriceAlertsReadProcedure,
			connect.WithSchema(priceAlertServiceMethods.ByName("MarkPriceAlertsRead")),
			connect.WithClientOptions(opts...),
		),
	}
}

// priceAlertServiceClient implements PriceAlertServiceClient.
type priceAlertServiceClient struct {
	listPriceAlerts     *connect.Client[v1.ListPriceAlertRequest, v1.ListPriceAlertResponse]
	markPriceAlertsRead *connect.Client[v1.MarkPriceAlertReadRequest, v1.MarkPriceAlertReadResponse]
}

// ListPriceAlerts calls news.v1.PriceAlertService.ListPriceAlerts.
func (c *priceAlertServiceClient) ListPriceAlerts(ctx context.Context, req *connect.Request[v1.ListPriceAlertRequest]) (*connect.Response[v1.ListPriceAlertResponse], error) {
	return c.listPriceAlerts.CallUnary(ctx, req)
}

// MarkPriceAlertsRead calls news.v1.PriceAlertService.MarkPriceAlertsRead.
func (c *priceAlertServiceClient) MarkPriceAlertsRead(ctx context.Context, req *connect.Request[v1.MarkPriceAlertReadRequest]) (*connect.Response[v1.MarkPriceAlertReadResponse], error) {
	return c.markPriceAlertsRead.CallUnary(ctx, req)
}

// PriceAlertServiceHandler is an implementation of the news.v1.PriceAlertService service.
type PriceAlertServiceHandler interface {
	ListPriceAlerts(context.Context, *connect.Request[v1.ListPriceAlertRequest]) (*connect.Response[v1.ListPriceAlertResponse], error)
	MarkPriceAlertsRead(context.Context, *connect.Request[v1.MarkPriceAlertReadRequest]) (*connect.Response[v1.MarkPriceAlertReadResponse], error)
}

// NewPriceAlertServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPriceAlertServiceHandler(svc PriceAlertServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	priceAlertServiceMethods := v1.File_price_alert_v1_price_alert_proto.Services().ByName("PriceAlertService").Methods()
	priceAlertServiceListPriceAlertsHandler := connect.NewUnaryHandler(
		PriceAlertServiceListPriceAlertsProcedure,
		svc.ListPriceAlerts,
		connect.WithSchema(priceAlertServiceMethods.ByName("ListPriceAlerts")),
		connect.WithHandlerOptions(opts...),
	)
	priceAlertServiceMarkPriceAlertsReadHandler := connect.NewUnaryHandler(
		PriceAlertServiceMarkPriceAlertsReadProcedure,
		svc.MarkPriceAlertsRead,
		connect.WithSchema(priceAlertServiceMethods.ByName("MarkPriceAlertsRead")),
		connect.WithHandlerOptions(opts...),
	)
	return "/news.v1.PriceAlertService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PriceAlertServiceListPriceAlertsProcedure:
			priceAlertServiceListPriceAlertsHandler.ServeHTTP(w, r)
		case PriceAlertServiceMarkPriceAlertsReadProcedure:
			priceAlertServiceMarkPriceAlertsReadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPriceAlertServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPriceAlertServiceHandler struct{}

func (UnimplementedPriceAlertServiceHandler) ListPriceAlerts(context.Context, *connect.Request[v1.ListPriceAlertRequest]) (*connect.Response[v1.ListPriceAlertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("news.v1.PriceAlertService.ListPriceAlerts is not implemented"))
}

func (UnimplementedPriceAlertServiceHandler) MarkPriceAlertsRead(context.Context, *connect.Request[v1.MarkPriceAlertReadRequest]) (*connect.Response[v1.MarkPriceAlertReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("news.v1.PriceAlertService.MarkPriceAlertsRead is not implemented"))
}
