// Copyright 2020-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: userwatch/v1/userwatch.proto

package userwatchv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "hyperliquid-server/gen/userwatch/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserWatchServiceName is the fully-qualified name of the UserWatchService service.
	UserWatchServiceName = "userwatch.v1.UserWatchService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserWatchServiceCreateUserWatchProcedure is the fully-qualified name of the UserWatchService's
	// CreateUserWatch RPC.
	UserWatchServiceCreateUserWatchProcedure = "/userwatch.v1.UserWatchService/CreateUserWatch"
	// UserWatchServiceUpUserWatchProcedure is the fully-qualified name of the UserWatchService's
	// UpUserWatch RPC.
	UserWatchServiceUpUserWatchProcedure = "/userwatch.v1.UserWatchService/UpUserWatch"
	// UserWatchServiceDeleteUserWatchProcedure is the fully-qualified name of the UserWatchService's
	// DeleteUserWatch RPC.
	UserWatchServiceDeleteUserWatchProcedure = "/userwatch.v1.UserWatchService/DeleteUserWatch"
	// UserWatchServiceListUserWatchProcedure is the fully-qualified name of the UserWatchService's
	// ListUserWatch RPC.
	UserWatchServiceListUserWatchProcedure = "/userwatch.v1.UserWatchService/ListUserWatch"
	// UserWatchServiceGetUserWatchMsgProcedure is the fully-qualified name of the UserWatchService's
	// GetUserWatchMsg RPC.
	UserWatchServiceGetUserWatchMsgProcedure = "/userwatch.v1.UserWatchService/GetUserWatchMsg"
	// UserWatchServiceListUserWatchMsgProcedure is the fully-qualified name of the UserWatchService's
	// ListUserWatchMsg RPC.
	UserWatchServiceListUserWatchMsgProcedure = "/userwatch.v1.UserWatchService/ListUserWatchMsg"
)

// UserWatchServiceClient is a client for the userwatch.v1.UserWatchService service.
type UserWatchServiceClient interface {
	CreateUserWatch(context.Context, *connect.Request[v1.CreateUserWatchRequest]) (*connect.Response[v1.CreateUserWatchResponse], error)
	UpUserWatch(context.Context, *connect.Request[v1.UpdateUserWatchRequest]) (*connect.Response[v1.UpdateUserWatchResponse], error)
	DeleteUserWatch(context.Context, *connect.Request[v1.DeleteUserWatchRequest]) (*connect.Response[v1.DeleteUserWatchResponse], error)
	ListUserWatch(context.Context, *connect.Request[v1.ListUserWatchRequest]) (*connect.Response[v1.ListUserWatchResponse], error)
	GetUserWatchMsg(context.Context, *connect.Request[v1.GetUserWatchMsgRequest]) (*connect.Response[v1.GetUserWatchMsgResponse], error)
	ListUserWatchMsg(context.Context, *connect.Request[v1.ListUserWatchMsgRequest]) (*connect.Response[v1.ListUserWatchMsgResponse], error)
}

// NewUserWatchServiceClient constructs a client for the userwatch.v1.UserWatchService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserWatchServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserWatchServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userWatchServiceMethods := v1.File_userwatch_v1_userwatch_proto.Services().ByName("UserWatchService").Methods()
	return &userWatchServiceClient{
		createUserWatch: connect.NewClient[v1.CreateUserWatchRequest, v1.CreateUserWatchResponse](
			httpClient,
			baseURL+UserWatchServiceCreateUserWatchProcedure,
			connect.WithSchema(userWatchServiceMethods.ByName("CreateUserWatch")),
			connect.WithClientOptions(opts...),
		),
		upUserWatch: connect.NewClient[v1.UpdateUserWatchRequest, v1.UpdateUserWatchResponse](
			httpClient,
			baseURL+UserWatchServiceUpUserWatchProcedure,
			connect.WithSchema(userWatchServiceMethods.ByName("UpUserWatch")),
			connect.WithClientOptions(opts...),
		),
		deleteUserWatch: connect.NewClient[v1.DeleteUserWatchRequest, v1.DeleteUserWatchResponse](
			httpClient,
			baseURL+UserWatchServiceDeleteUserWatchProcedure,
			connect.WithSchema(userWatchServiceMethods.ByName("DeleteUserWatch")),
			connect.WithClientOptions(opts...),
		),
		listUserWatch: connect.NewClient[v1.ListUserWatchRequest, v1.ListUserWatchResponse](
			httpClient,
			baseURL+UserWatchServiceListUserWatchProcedure,
			connect.WithSchema(userWatchServiceMethods.ByName("ListUserWatch")),
			connect.WithClientOptions(opts...),
		),
		getUserWatchMsg: connect.NewClient[v1.GetUserWatchMsgRequest, v1.GetUserWatchMsgResponse](
			httpClient,
			baseURL+UserWatchServiceGetUserWatchMsgProcedure,
			connect.WithSchema(userWatchServiceMethods.ByName("GetUserWatchMsg")),
			connect.WithClientOptions(opts...),
		),
		listUserWatchMsg: connect.NewClient[v1.ListUserWatchMsgRequest, v1.ListUserWatchMsgResponse](
			httpClient,
			baseURL+UserWatchServiceListUserWatchMsgProcedure,
			connect.WithSchema(userWatchServiceMethods.ByName("ListUserWatchMsg")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userWatchServiceClient implements UserWatchServiceClient.
type userWatchServiceClient struct {
	createUserWatch  *connect.Client[v1.CreateUserWatchRequest, v1.CreateUserWatchResponse]
	upUserWatch      *connect.Client[v1.UpdateUserWatchRequest, v1.UpdateUserWatchResponse]
	deleteUserWatch  *connect.Client[v1.DeleteUserWatchRequest, v1.DeleteUserWatchResponse]
	listUserWatch    *connect.Client[v1.ListUserWatchRequest, v1.ListUserWatchResponse]
	getUserWatchMsg  *connect.Client[v1.GetUserWatchMsgRequest, v1.GetUserWatchMsgResponse]
	listUserWatchMsg *connect.Client[v1.ListUserWatchMsgRequest, v1.ListUserWatchMsgResponse]
}

// CreateUserWatch calls userwatch.v1.UserWatchService.CreateUserWatch.
func (c *userWatchServiceClient) CreateUserWatch(ctx context.Context, req *connect.Request[v1.CreateUserWatchRequest]) (*connect.Response[v1.CreateUserWatchResponse], error) {
	return c.createUserWatch.CallUnary(ctx, req)
}

// UpUserWatch calls userwatch.v1.UserWatchService.UpUserWatch.
func (c *userWatchServiceClient) UpUserWatch(ctx context.Context, req *connect.Request[v1.UpdateUserWatchRequest]) (*connect.Response[v1.UpdateUserWatchResponse], error) {
	return c.upUserWatch.CallUnary(ctx, req)
}

// DeleteUserWatch calls userwatch.v1.UserWatchService.DeleteUserWatch.
func (c *userWatchServiceClient) DeleteUserWatch(ctx context.Context, req *connect.Request[v1.DeleteUserWatchRequest]) (*connect.Response[v1.DeleteUserWatchResponse], error) {
	return c.deleteUserWatch.CallUnary(ctx, req)
}

// ListUserWatch calls userwatch.v1.UserWatchService.ListUserWatch.
func (c *userWatchServiceClient) ListUserWatch(ctx context.Context, req *connect.Request[v1.ListUserWatchRequest]) (*connect.Response[v1.ListUserWatchResponse], error) {
	return c.listUserWatch.CallUnary(ctx, req)
}

// GetUserWatchMsg calls userwatch.v1.UserWatchService.GetUserWatchMsg.
func (c *userWatchServiceClient) GetUserWatchMsg(ctx context.Context, req *connect.Request[v1.GetUserWatchMsgRequest]) (*connect.Response[v1.GetUserWatchMsgResponse], error) {
	return c.getUserWatchMsg.CallUnary(ctx, req)
}

// ListUserWatchMsg calls userwatch.v1.UserWatchService.ListUserWatchMsg.
func (c *userWatchServiceClient) ListUserWatchMsg(ctx context.Context, req *connect.Request[v1.ListUserWatchMsgRequest]) (*connect.Response[v1.ListUserWatchMsgResponse], error) {
	return c.listUserWatchMsg.CallUnary(ctx, req)
}

// UserWatchServiceHandler is an implementation of the userwatch.v1.UserWatchService service.
type UserWatchServiceHandler interface {
	CreateUserWatch(context.Context, *connect.Request[v1.CreateUserWatchRequest]) (*connect.Response[v1.CreateUserWatchResponse], error)
	UpUserWatch(context.Context, *connect.Request[v1.UpdateUserWatchRequest]) (*connect.Response[v1.UpdateUserWatchResponse], error)
	DeleteUserWatch(context.Context, *connect.Request[v1.DeleteUserWatchRequest]) (*connect.Response[v1.DeleteUserWatchResponse], error)
	ListUserWatch(context.Context, *connect.Request[v1.ListUserWatchRequest]) (*connect.Response[v1.ListUserWatchResponse], error)
	GetUserWatchMsg(context.Context, *connect.Request[v1.GetUserWatchMsgRequest]) (*connect.Response[v1.GetUserWatchMsgResponse], error)
	ListUserWatchMsg(context.Context, *connect.Request[v1.ListUserWatchMsgRequest]) (*connect.Response[v1.ListUserWatchMsgResponse], error)
}

// NewUserWatchServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserWatchServiceHandler(svc UserWatchServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userWatchServiceMethods := v1.File_userwatch_v1_userwatch_proto.Services().ByName("UserWatchService").Methods()
	userWatchServiceCreateUserWatchHandler := connect.NewUnaryHandler(
		UserWatchServiceCreateUserWatchProcedure,
		svc.CreateUserWatch,
		connect.WithSchema(userWatchServiceMethods.ByName("CreateUserWatch")),
		connect.WithHandlerOptions(opts...),
	)
	userWatchServiceUpUserWatchHandler := connect.NewUnaryHandler(
		UserWatchServiceUpUserWatchProcedure,
		svc.UpUserWatch,
		connect.WithSchema(userWatchServiceMethods.ByName("UpUserWatch")),
		connect.WithHandlerOptions(opts...),
	)
	userWatchServiceDeleteUserWatchHandler := connect.NewUnaryHandler(
		UserWatchServiceDeleteUserWatchProcedure,
		svc.DeleteUserWatch,
		connect.WithSchema(userWatchServiceMethods.ByName("DeleteUserWatch")),
		connect.WithHandlerOptions(opts...),
	)
	userWatchServiceListUserWatchHandler := connect.NewUnaryHandler(
		UserWatchServiceListUserWatchProcedure,
		svc.ListUserWatch,
		connect.WithSchema(userWatchServiceMethods.ByName("ListUserWatch")),
		connect.WithHandlerOptions(opts...),
	)
	userWatchServiceGetUserWatchMsgHandler := connect.NewUnaryHandler(
		UserWatchServiceGetUserWatchMsgProcedure,
		svc.GetUserWatchMsg,
		connect.WithSchema(userWatchServiceMethods.ByName("GetUserWatchMsg")),
		connect.WithHandlerOptions(opts...),
	)
	userWatchServiceListUserWatchMsgHandler := connect.NewUnaryHandler(
		UserWatchServiceListUserWatchMsgProcedure,
		svc.ListUserWatchMsg,
		connect.WithSchema(userWatchServiceMethods.ByName("ListUserWatchMsg")),
		connect.WithHandlerOptions(opts...),
	)
	return "/userwatch.v1.UserWatchService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserWatchServiceCreateUserWatchProcedure:
			userWatchServiceCreateUserWatchHandler.ServeHTTP(w, r)
		case UserWatchServiceUpUserWatchProcedure:
			userWatchServiceUpUserWatchHandler.ServeHTTP(w, r)
		case UserWatchServiceDeleteUserWatchProcedure:
			userWatchServiceDeleteUserWatchHandler.ServeHTTP(w, r)
		case UserWatchServiceListUserWatchProcedure:
			userWatchServiceListUserWatchHandler.ServeHTTP(w, r)
		case UserWatchServiceGetUserWatchMsgProcedure:
			userWatchServiceGetUserWatchMsgHandler.ServeHTTP(w, r)
		case UserWatchServiceListUserWatchMsgProcedure:
			userWatchServiceListUserWatchMsgHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserWatchServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserWatchServiceHandler struct{}

func (UnimplementedUserWatchServiceHandler) CreateUserWatch(context.Context, *connect.Request[v1.CreateUserWatchRequest]) (*connect.Response[v1.CreateUserWatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userwatch.v1.UserWatchService.CreateUserWatch is not implemented"))
}

func (UnimplementedUserWatchServiceHandler) UpUserWatch(context.Context, *connect.Request[v1.UpdateUserWatchRequest]) (*connect.Response[v1.UpdateUserWatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userwatch.v1.UserWatchService.UpUserWatch is not implemented"))
}

func (UnimplementedUserWatchServiceHandler) DeleteUserWatch(context.Context, *connect.Request[v1.DeleteUserWatchRequest]) (*connect.Response[v1.DeleteUserWatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userwatch.v1.UserWatchService.DeleteUserWatch is not implemented"))
}

func (UnimplementedUserWatchServiceHandler) ListUserWatch(context.Context, *connect.Request[v1.ListUserWatchRequest]) (*connect.Response[v1.ListUserWatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userwatch.v1.UserWatchService.ListUserWatch is not implemented"))
}

func (UnimplementedUserWatchServiceHandler) GetUserWatchMsg(context.Context, *connect.Request[v1.GetUserWatchMsgRequest]) (*connect.Response[v1.GetUserWatchMsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userwatch.v1.UserWatchService.GetUserWatchMsg is not implemented"))
}

func (UnimplementedUserWatchServiceHandler) ListUserWatchMsg(context.Context, *connect.Request[v1.ListUserWatchMsgRequest]) (*connect.Response[v1.ListUserWatchMsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("userwatch.v1.UserWatchService.ListUserWatchMsg is not implemented"))
}
