// Copyright 2020-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: login/v1/login.proto

package loginv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "hyperliquid-server/gen/login/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LoginServiceName is the fully-qualified name of the LoginService service.
	LoginServiceName = "login.v1.LoginService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LoginServiceLoginProcedure is the fully-qualified name of the LoginService's Login RPC.
	LoginServiceLoginProcedure = "/login.v1.LoginService/Login"
	// LoginServiceLoginIsValidProcedure is the fully-qualified name of the LoginService's LoginIsValid
	// RPC.
	LoginServiceLoginIsValidProcedure = "/login.v1.LoginService/LoginIsValid"
	// LoginServiceLogoutProcedure is the fully-qualified name of the LoginService's Logout RPC.
	LoginServiceLogoutProcedure = "/login.v1.LoginService/Logout"
	// LoginServiceRegisterFcmProcedure is the fully-qualified name of the LoginService's RegisterFcm
	// RPC.
	LoginServiceRegisterFcmProcedure = "/login.v1.LoginService/RegisterFcm"
)

// LoginServiceClient is a client for the login.v1.LoginService service.
type LoginServiceClient interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	LoginIsValid(context.Context, *connect.Request[v1.LoginIsValidRequest]) (*connect.Response[v1.LoginIsValidResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	RegisterFcm(context.Context, *connect.Request[v1.RegisterFcmRequest]) (*connect.Response[v1.RegisterFcmResponse], error)
}

// NewLoginServiceClient constructs a client for the login.v1.LoginService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLoginServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LoginServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	loginServiceMethods := v1.File_login_v1_login_proto.Services().ByName("LoginService").Methods()
	return &loginServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+LoginServiceLoginProcedure,
			connect.WithSchema(loginServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		loginIsValid: connect.NewClient[v1.LoginIsValidRequest, v1.LoginIsValidResponse](
			httpClient,
			baseURL+LoginServiceLoginIsValidProcedure,
			connect.WithSchema(loginServiceMethods.ByName("LoginIsValid")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+LoginServiceLogoutProcedure,
			connect.WithSchema(loginServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		registerFcm: connect.NewClient[v1.RegisterFcmRequest, v1.RegisterFcmResponse](
			httpClient,
			baseURL+LoginServiceRegisterFcmProcedure,
			connect.WithSchema(loginServiceMethods.ByName("RegisterFcm")),
			connect.WithClientOptions(opts...),
		),
	}
}

// loginServiceClient implements LoginServiceClient.
type loginServiceClient struct {
	login        *connect.Client[v1.LoginRequest, v1.LoginResponse]
	loginIsValid *connect.Client[v1.LoginIsValidRequest, v1.LoginIsValidResponse]
	logout       *connect.Client[v1.LogoutRequest, v1.LogoutResponse]
	registerFcm  *connect.Client[v1.RegisterFcmRequest, v1.RegisterFcmResponse]
}

// Login calls login.v1.LoginService.Login.
func (c *loginServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// LoginIsValid calls login.v1.LoginService.LoginIsValid.
func (c *loginServiceClient) LoginIsValid(ctx context.Context, req *connect.Request[v1.LoginIsValidRequest]) (*connect.Response[v1.LoginIsValidResponse], error) {
	return c.loginIsValid.CallUnary(ctx, req)
}

// Logout calls login.v1.LoginService.Logout.
func (c *loginServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// RegisterFcm calls login.v1.LoginService.RegisterFcm.
func (c *loginServiceClient) RegisterFcm(ctx context.Context, req *connect.Request[v1.RegisterFcmRequest]) (*connect.Response[v1.RegisterFcmResponse], error) {
	return c.registerFcm.CallUnary(ctx, req)
}

// LoginServiceHandler is an implementation of the login.v1.LoginService service.
type LoginServiceHandler interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	LoginIsValid(context.Context, *connect.Request[v1.LoginIsValidRequest]) (*connect.Response[v1.LoginIsValidResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	RegisterFcm(context.Context, *connect.Request[v1.RegisterFcmRequest]) (*connect.Response[v1.RegisterFcmResponse], error)
}

// NewLoginServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLoginServiceHandler(svc LoginServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	loginServiceMethods := v1.File_login_v1_login_proto.Services().ByName("LoginService").Methods()
	loginServiceLoginHandler := connect.NewUnaryHandler(
		LoginServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(loginServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	loginServiceLoginIsValidHandler := connect.NewUnaryHandler(
		LoginServiceLoginIsValidProcedure,
		svc.LoginIsValid,
		connect.WithSchema(loginServiceMethods.ByName("LoginIsValid")),
		connect.WithHandlerOptions(opts...),
	)
	loginServiceLogoutHandler := connect.NewUnaryHandler(
		LoginServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(loginServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	loginServiceRegisterFcmHandler := connect.NewUnaryHandler(
		LoginServiceRegisterFcmProcedure,
		svc.RegisterFcm,
		connect.WithSchema(loginServiceMethods.ByName("RegisterFcm")),
		connect.WithHandlerOptions(opts...),
	)
	return "/login.v1.LoginService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LoginServiceLoginProcedure:
			loginServiceLoginHandler.ServeHTTP(w, r)
		case LoginServiceLoginIsValidProcedure:
			loginServiceLoginIsValidHandler.ServeHTTP(w, r)
		case LoginServiceLogoutProcedure:
			loginServiceLogoutHandler.ServeHTTP(w, r)
		case LoginServiceRegisterFcmProcedure:
			loginServiceRegisterFcmHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLoginServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLoginServiceHandler struct{}

func (UnimplementedLoginServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("login.v1.LoginService.Login is not implemented"))
}

func (UnimplementedLoginServiceHandler) LoginIsValid(context.Context, *connect.Request[v1.LoginIsValidRequest]) (*connect.Response[v1.LoginIsValidResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("login.v1.LoginService.LoginIsValid is not implemented"))
}

func (UnimplementedLoginServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("login.v1.LoginService.Logout is not implemented"))
}

func (UnimplementedLoginServiceHandler) RegisterFcm(context.Context, *connect.Request[v1.RegisterFcmRequest]) (*connect.Response[v1.RegisterFcmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("login.v1.LoginService.RegisterFcm is not implemented"))
}
