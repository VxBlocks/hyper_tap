// Copyright 2020-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.6.3 with parameter "target=ts"
// @generated from file news/v1/news.proto (package news.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_options_gorm } from "../../options/gorm_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file news/v1/news.proto.
 */
export const file_news_v1_news: GenFile = /*@__PURE__*/
  fileDesc("ChJuZXdzL3YxL25ld3MucHJvdG8SB25ld3MudjEiaAoETmV3cxIMCgR1dWlkGAEgASgJEg0KBXRpdGxlGAIgASgJEhIKCmNyZWF0ZWRfYXQYAyABKAkSDwoHcHJldmlldxgEIAEoCRIQCghjYXRlZ29yeRgFIAEoCRIMCgRyZWFkGAYgASgIIhUKE0xpc3RVc2VyTmV3c1JlcXVlc3QiNgoUTGlzdFVzZXJOZXdzUmVzcG9uc2USHgoHcmVzdWx0cxgBIAMoCzINLm5ld3MudjEuTmV3cyIjChNNYXJrTmV3c1JlYWRSZXF1ZXN0EgwKBHV1aWQYASABKAkiFgoUTWFya05ld3NSZWFkUmVzcG9uc2UypwEKC05ld3NTZXJ2aWNlEkkKCExpc3ROZXdzEhwubmV3cy52MS5MaXN0VXNlck5ld3NSZXF1ZXN0Gh0ubmV3cy52MS5MaXN0VXNlck5ld3NSZXNwb25zZSIAEk0KDE1hcmtOZXdzUmVhZBIcLm5ld3MudjEuTWFya05ld3NSZWFkUmVxdWVzdBodLm5ld3MudjEuTWFya05ld3NSZWFkUmVzcG9uc2UiAEJ8Cgtjb20ubmV3cy52MUIJTmV3c1Byb3RvUAFaJWh5cGVybGlxdWlkLXNlcnZlci9nZW4vbmV3cy92MTtuZXdzdjGiAgNOWFiqAgdOZXdzLlYxygIHTmV3c1xWMeICE05ld3NcVjFcR1BCTWV0YWRhdGHqAghOZXdzOjpWMWIGcHJvdG8z", [file_google_protobuf_timestamp, file_options_gorm, file_google_protobuf_field_mask]);

/**
 * @generated from message news.v1.News
 */
export type News = Message<"news.v1.News"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * @generated from field: string created_at = 3;
   */
  createdAt: string;

  /**
   * @generated from field: string preview = 4;
   */
  preview: string;

  /**
   * @generated from field: string category = 5;
   */
  category: string;

  /**
   * @generated from field: bool read = 6;
   */
  read: boolean;
};

/**
 * Describes the message news.v1.News.
 * Use `create(NewsSchema)` to create a new message.
 */
export const NewsSchema: GenMessage<News> = /*@__PURE__*/
  messageDesc(file_news_v1_news, 0);

/**
 * @generated from message news.v1.ListUserNewsRequest
 */
export type ListUserNewsRequest = Message<"news.v1.ListUserNewsRequest"> & {
};

/**
 * Describes the message news.v1.ListUserNewsRequest.
 * Use `create(ListUserNewsRequestSchema)` to create a new message.
 */
export const ListUserNewsRequestSchema: GenMessage<ListUserNewsRequest> = /*@__PURE__*/
  messageDesc(file_news_v1_news, 1);

/**
 * @generated from message news.v1.ListUserNewsResponse
 */
export type ListUserNewsResponse = Message<"news.v1.ListUserNewsResponse"> & {
  /**
   * @generated from field: repeated news.v1.News results = 1;
   */
  results: News[];
};

/**
 * Describes the message news.v1.ListUserNewsResponse.
 * Use `create(ListUserNewsResponseSchema)` to create a new message.
 */
export const ListUserNewsResponseSchema: GenMessage<ListUserNewsResponse> = /*@__PURE__*/
  messageDesc(file_news_v1_news, 2);

/**
 * @generated from message news.v1.MarkNewsReadRequest
 */
export type MarkNewsReadRequest = Message<"news.v1.MarkNewsReadRequest"> & {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;
};

/**
 * Describes the message news.v1.MarkNewsReadRequest.
 * Use `create(MarkNewsReadRequestSchema)` to create a new message.
 */
export const MarkNewsReadRequestSchema: GenMessage<MarkNewsReadRequest> = /*@__PURE__*/
  messageDesc(file_news_v1_news, 3);

/**
 * @generated from message news.v1.MarkNewsReadResponse
 */
export type MarkNewsReadResponse = Message<"news.v1.MarkNewsReadResponse"> & {
};

/**
 * Describes the message news.v1.MarkNewsReadResponse.
 * Use `create(MarkNewsReadResponseSchema)` to create a new message.
 */
export const MarkNewsReadResponseSchema: GenMessage<MarkNewsReadResponse> = /*@__PURE__*/
  messageDesc(file_news_v1_news, 4);

/**
 * @generated from service news.v1.NewsService
 */
export const NewsService: GenService<{
  /**
   * @generated from rpc news.v1.NewsService.ListNews
   */
  listNews: {
    methodKind: "unary";
    input: typeof ListUserNewsRequestSchema;
    output: typeof ListUserNewsResponseSchema;
  },
  /**
   * @generated from rpc news.v1.NewsService.MarkNewsRead
   */
  markNewsRead: {
    methodKind: "unary";
    input: typeof MarkNewsReadRequestSchema;
    output: typeof MarkNewsReadResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_news_v1_news, 0);

